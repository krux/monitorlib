#!/usr/local/bin/kpython
#
# Author: Charlie Schluting <charlie@krux.com>
#

"""
  Collectd notification plugin (reads notifications generated by collectd plugins):
  converts to JSON, and forwards messages via HTTP POST, or directly to a raw tcp port.

  Also, supports sending to pagerduty if the message has the text 'PD', and pd-key command
  line option was used.

  If the text contains ENDOFEMAIL, an email alert will be sent to addresses in the list before
  that string.

input format:

Severity: FAILURE
Time: 1200928930
Host: myhost.mydomain.org
\n
This is a message...

"""

import time
import socket
import os
import sys
import logging
import urllib
import urllib2
import smtplib
from optparse import OptionParser
import monitorlib.pagerduty as pagerduty
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

try:
    import simplejson as json
except ImportError:
    import json

def convert_to_json(message):
    """
    converts input (as formatted by collectd) to json
    """

    output = dict([line.split(': ', 1) for line in message.split('\n')[:3]])
    try:
        output.update({'Message': ''.join(message.split('\n')[3:])})
    except IndexError:
        output.update('Message', '')

    return json.dumps(output)

def send_to_socket(message, host, port):
    """
    Sends message to host/port via tcp
    """
    sock = socket.socket()

    sock.connect((host, int(port)))
    sock.sendall(message)
    sock.close()

def post_to_url(message, url):
    """
    HTTP POSTs message to url
    """
    req = urllib2.Request(url, json.dumps(message), {'Content-Type': 'application/json'})
    f = urllib2.urlopen(req)
    resp = f.read()
    f.close()

    return resp

def send_to_pagerduty(key, message):
    """
    Sends alert to pager duty - you must call authenticate() first
    """
    pagerduty.authenticate(key)

    if 'OKAY' in message['Severity']:
        pagerduty.event('resolve', message['Message'].lstrip('PD'))

    elif 'FAILURE' or 'WARNING' in message['Serverity']:
        pagerduty.event('trigger', message['Message'].lstrip('PD'))

def send_to_email(address, message):
    """
    Sends alert via email
    """
    print "emailing: ", address

    me = 'collectd@krux.com'
    you = str(address)

    msg = MIMEMultipart()
    msg['Subject'] = '[collectd] %s %s' % (message['Severity'], message['Message'])
    msg['From'] = me
    msg['To'] = you
    body = MIMEText(str(message))
    msg.attach(body)

    s = smtplib.SMTP('localhost')
    s.sendmail(me, [you], msg.as_string())
    s.quit()

    pass

def check_redis_alerts_disabled(message):
    """
    Check redis to see if alerts are disabled for this host - times out after 2 seconds,
    to not block on an unreachable redis server.
    """
    return False

if __name__ == '__main__':

    parser = OptionParser("usage: %prog [options]")
    parser.add_option("-d", "--debug", default=None, action="store_true", help="enable debug output")
    parser.add_option("--http-server", help="HTTP server to post message to (url)")
    parser.add_option("--server", help="server to post message to (host:port) via TCP")
    parser.add_option("--pd-key", "--pagerduty-key", help="your pagerduty service_key, enables paging")
    parser.add_option("--datastore", help="data storage mechanism for host state ([dis]/[en]abled nofitications)")
    (options, args) = parser.parse_args()

    # set up logging
    if options.debug: log_level = logging.DEBUG
    else:             log_level = logging.INFO

    logging.basicConfig(stream=sys.stdout, level=log_level)
    logging.basicConfig(stream=sys.stderr, level=(logging.ERROR,logging.CRITICAL))

    stdin = sys.stdin.read()
    if not stdin:
        logging.error("did not receive any message on stdin, exiting..")
        sys.exit(1)

    message = convert_to_json(stdin)

    # check if notifications for this host are disabled, and exit if so
    if options.datastore and locals()['check_' + options.datastore + '_alerts_disabled'](message):
        sys.exit(0)

    if options.server:
        host, port = options.server.split(":")
        send_to_socket(message, host, port)
    elif options.http_server:
        post_to_url(message, options.http_server)

    message = json.loads(message)
    if 'ENDEMAIL' in message['Message']:
        address, message['Message'] = message['Message'].split('ENDEMAIL')
        send_to_email(address, message)

    if options.pd_key and 'PD' in message['Message']:
        send_to_pagerduty(options.pd_key, message)


